#include <Arduino.h>
#include "scservo/SCServo.h"
#include "memorystruct.h"

#define NUMSERVOS 7

MemoryReplyBuf mBuf[NUMSERVOS];

SMS_STS st;

// the uart used to control servos.
// GPIO 18 - S_RXD, GPIO 19 - S_TXD, as default.
#define S_RXD 18
#define S_TXD 19

// #define BAUDRATE 460800
#define BAUDRATE 921600

TaskHandle_t xTaskServoInterface = NULL;
const UBaseType_t taskPriority = 1;

void flushSerialServoLine()
{
  /*
    The only thing I could figure out in order to interrupt
    the sync comms and get everything reset.
    Otherwise the packets get out of sync and the 8ms loop goes to 120ms
    and all the data is wrong.
    It works.
  */
  for (int e = 0; e < NUMSERVOS; e++)
  {
    st.Ping(e + 1);
  }
}


void setup()
{
  // Configure serial transport
  Serial.begin(BAUDRATE);

  Serial1.begin(1000000, SERIAL_8N1, S_RXD, S_TXD);
  st.pSerial = &Serial1;

  for (int i = 0; i < NUMSERVOS; i++)
  {
    st.Read((i + 1), 0, mBuf[i].bytes, sizeof(MemoryStruct)); // Pass the array to the Read function
    st.EnableTorque(i, 0);
    //st.writeByte(i, 8, 1);
  }
  // Core where the task should run
}

unsigned long start_time = 0;
float_t duration = 0;
float_t maximum = 0;

uint8_t IDS[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

void loop()
{
  start_time = micros();

  st.syncReadPacketTx(IDS, NUMSERVOS, 56, 15);

  int RxResult = 0;

  for (int i = 0; i < NUMSERVOS; i++)
  {
    RxResult = st.syncReadPacketRx((i + 1), mBuf[i].bytes + 56);
    if (RxResult > 0)
    {
      //memcpy(mBuf[i].bytes + 56, buf.bytes + 56, 15);
    }
    else
    {
      printf("Error on servo id: %d\n", (i+1));
      flushSerialServoLine();
      return;
    }
  }
  sleep(0.001);

  st.syncReadPacketTx(IDS, NUMSERVOS, 56, 4);

  for (int i = 0; i < NUMSERVOS; i++)
  {
    RxResult = st.syncReadPacketRx((i + 1), mBuf[i].bytes + 56);
    if (RxResult > 0)
    {
      //memcpy(mBuf[i].bytes + 56, buf.bytes + 56, 15);
    }
    else
    {
      flushSerialServoLine();
      return;
    }
  }

  duration = static_cast<float_t>((micros() - start_time)/1000.0);
  maximum = fmax(duration, maximum);
  mBuf[0].memory.firmwareMajor = duration;

  printf("Duration_ms: %.1f Max_ms: %.1f\n", duration, maximum);
  // print which core the task is running on
  //printf("Core: %d\n", xPortGetCoreID());
  // print how many cores are available
  //printf("Cores: %d\n", portNUM_PROCESSORS);

  // if (duration > 20)
  // {
  //   // emulate rFlushSCS
  //   while (Serial.read() != -1)
  //     ;
  // }

  sleep(0.1);
}