#include <Arduino.h>
#include <micro_ros_platformio.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>

//#include <std_msgs/msg/int32.h>

#include "scservo/SCServo.h"

#include "memorystruct.h"

#include <alfie_msgs/msg/servo_memory_map.h>

#if !defined(MICRO_ROS_TRANSPORT_ARDUINO_SERIAL)
#error This example is only avaliable for Arduino framework with serial transport.
#endif

#define NUMSERVOS 10


MemoryReplyBuf mBuf[NUMSERVOS];

rcl_publisher_t publisher;

typedef union {
  alfie_msgs__msg__ServoMemoryMap msg;
  u8 bytes[sizeof(alfie_msgs__msg__ServoMemoryMap)];
} ServoMemoryMapMsgBuf ;
ServoMemoryMapMsgBuf msg;
//std_msgs__msg__Int32 msg;

rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t timer;

SMS_STS st;



// the uart used to control servos.
// GPIO 18 - S_RXD, GPIO 19 - S_TXD, as default.
#define S_RXD 18
#define S_TXD 19

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){}}

// Error handle loop
void error_loop() {
  while(1) {
    delay(100);
  }
}

void vServoInterfaceTask1(void *pvParameters) {

  unsigned long start_time;

  while (1) {
    
    start_time = millis();

    for(int i = 0; i < NUMSERVOS; i++) {
      st.Read(i+1, 56, mBuf[i].bytes + 56, 15); // Pass the array to the Read function
    }

    // TODO add in command feed back to servos here as well
    // substitute second read for now
    for(int i = 0; i < NUMSERVOS; i++) {
      st.Read(i+1, 56, mBuf[i].bytes + 56, 4); // Pass the array to the Read function
    }

    mBuf[0].memory.firmwareMajor = static_cast<uint8_t>(millis() - start_time);

    vTaskDelay(1 / portTICK_PERIOD_MS);

    
  }
}

void vServoInterfaceTask2(void *pvParameters) {

  unsigned long start_time = 0;
  uint8_t duration = 0;

  uint8_t IDS[NUMSERVOS] = {1,2,3,4,5,6,7,8,9,10};

  while (1) {
    
    start_time = millis();

    st.syncReadPacketTx(IDS, NUMSERVOS,56, 15);

    for(int i=0;i<NUMSERVOS;i++){
      //vTaskDelay(0.005 / portTICK_PERIOD_MS);
      st.syncReadPacketRx((i+1), mBuf[i].bytes + 56);
    }

    vTaskDelay(1 / portTICK_PERIOD_MS);

    st.syncReadPacketTx(IDS, NUMSERVOS,56, 4);

    for(int i=0;i<NUMSERVOS;i++){
      //vTaskDelay(0.005 / portTICK_PERIOD_MS);
      st.syncReadPacketRx((i+1), mBuf[i].bytes + 56);
    }

    duration = static_cast<uint8_t>(millis() - start_time);
    mBuf[0].memory.firmwareMajor = duration;

    if(duration > 20) {
      //emulate rFlushSCS
      while(Serial.read() != -1); 
    }

    vTaskDelay(1 / portTICK_PERIOD_MS);

  

    
  }
}

void timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
    RCLC_UNUSED(last_call_time);
    if (timer != NULL) {
        
        // copy mBuf[i].bytes into msg.bytes
        //memcpy(msg.bytes, mBuf[0].bytes, sizeof(MemoryStruct));
        msg.msg.firmwaremajor = mBuf[0].memory.firmwareMajor;
        msg.msg.firmwaresub = mBuf[0].memory.firmwareSub;
        msg.msg.unassigned0 = mBuf[0].memory.unassigned0;
        msg.msg.servomajor = mBuf[0].memory.servoMajor;
        msg.msg.servosub = mBuf[0].memory.servoSub;
        msg.msg.servoid = mBuf[0].memory.servoID;
        msg.msg.baudrate = mBuf[0].memory.baudRate;
        msg.msg.returndelay = mBuf[0].memory.returnDelay;
        msg.msg.responsestatuslevel = mBuf[0].memory.responseStatusLevel;
        msg.msg.minanglelimit = mBuf[0].memory.minAngleLimit;
        msg.msg.maxanglelimit = mBuf[0].memory.maxAngleLimit;
        msg.msg.maxtemplimit = mBuf[0].memory.maxTempLimit;
        msg.msg.mininputvoltage = mBuf[0].memory.minInputVoltage;
        msg.msg.maxinputvoltage = mBuf[0].memory.maxInputVoltage;
        msg.msg.maxtorque = mBuf[0].memory.maxTorque;
        msg.msg.phase = mBuf[0].memory.phase;
        msg.msg.unloadingcondition = mBuf[0].memory.unloadingCondition;
        msg.msg.ledalarmcondition = mBuf[0].memory.LEDAlarmCondition;
        msg.msg.pcoefficient = mBuf[0].memory.Pcoefficient;
        msg.msg.dcoefficient = mBuf[0].memory.Dcoefficient;
        msg.msg.icoefficient = mBuf[0].memory.Icoefficient;
        msg.msg.minstartupforce = mBuf[0].memory.minStartupForce;
        msg.msg.clockwiseinsensitivearea = mBuf[0].memory.clockwiseInsensitiveArea;
        msg.msg.counterclockwiseinsensitiveregion = mBuf[0].memory.counterclockwiseInsensitiveRegion;
        msg.msg.protectioncurrent = mBuf[0].memory.protectionCurrent;
        msg.msg.angularresolution = mBuf[0].memory.angularResolution;
        msg.msg.positioncorrection = mBuf[0].memory.positionCorrection;
        msg.msg.operationmode = mBuf[0].memory.operationMode;
        msg.msg.protectivetorque = mBuf[0].memory.protectiveTorque;
        msg.msg.protectiontime = mBuf[0].memory.protectionTime;
        msg.msg.overloadtorque = mBuf[0].memory.overloadTorque;
        msg.msg.speedclosedlooppcoefficient = mBuf[0].memory.speedClosedLoopPcoefficient;
        msg.msg.overcurrentprotectiontime = mBuf[0].memory.OvercurrentProtectionTime;
        msg.msg.velocityclosedloopicoefficient = mBuf[0].memory.velocityClosedLoopIcoefficient;
        msg.msg.torqueswitch = mBuf[0].memory.torqueSwitch;
        msg.msg.acceleration = mBuf[0].memory.acceleration;
        msg.msg.targetlocation = mBuf[0].memory.targetLocation;
        msg.msg.runningtime = mBuf[0].memory.runningTime;
        msg.msg.runningspeed = mBuf[0].memory.runningSpeed; 
        msg.msg.torquelimit = mBuf[0].memory.torqueLimit;
        //msg.msg.unassigned1 = mBuf[0].memory.unassigned1;
        //msg.msg.unassigned2 = mBuf[0].memory.unassigned2;
        //msg.msg.unassigned3 = mBuf[0].memory.unassigned3;
        //msg.msg.unassigned4 = mBuf[0].memory.unassigned4;
        //msg.msg.unassigned5 = mBuf[0].memory.unassigned5;
        msg.msg.lockmark = mBuf[0].memory.lockMark;
        msg.msg.currentlocation = mBuf[0].memory.currentLocation;
        msg.msg.currentspeed = mBuf[0].memory.currentSpeed;
        msg.msg.currentload = mBuf[0].memory.currentLoad;
        msg.msg.currentvoltage = mBuf[0].memory.currentVoltage;
        msg.msg.currenttemperature = mBuf[0].memory.currentTemperature;
        msg.msg.asyncwriteflag = mBuf[0].memory.asyncWriteFlag;
        msg.msg.servostatus = mBuf[0].memory.servoStatus;
        msg.msg.mobilesign = mBuf[0].memory.mobileSign;
        //msg.msg.unassigned6 = mBuf[0].memory.unassigned6;
        //msg.msg.unassigned7 = mBuf[0].memory.unassigned7;
        msg.msg.currentcurrent = mBuf[0].memory.currentCurrent;

        RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
    }
}

//#define BAUDRATE 460800
#define BAUDRATE 921600

TaskHandle_t xTaskServoInterface = NULL;
const UBaseType_t taskPriority = 1;

void setup() {
  // Configure serial transport
  Serial.begin(BAUDRATE);

  Serial1.begin(1000000, SERIAL_8N1, S_RXD, S_TXD);
  st.pSerial = &Serial1;

  set_microros_serial_transports(Serial);

  delay(5000);

  allocator = rcl_get_default_allocator();

  //create init_options
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));

  // create node
  RCCHECK(rclc_node_init_default(&node, "micro_ros_platformio_node", "", &support));

  // create publisher
  RCCHECK(rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(alfie_msgs, msg, ServoMemoryMap),
    "micro_ros_platformio_node_publisher"));

  // create timer,
  const unsigned int timer_timeout = 1;
  RCCHECK(rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(timer_timeout),
    timer_callback));

  // create executor
  RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
  RCCHECK(rclc_executor_add_timer(&executor, &timer));



  for(int i = 0; i < NUMSERVOS; i++) {
    st.Read((i+1), 0, mBuf[i].bytes, sizeof(MemoryStruct)); // Pass the array to the Read function
    st.EnableTorque(i, 1);
    st.writeByte(i,8,1);
  }

    xTaskCreatePinnedToCore(
      vServoInterfaceTask2,
      "ServoInterfaceTask",   // A name just for humans
      10000,                  // Stack size in bytes
      NULL,                  // Parameter passed as input of the task
      taskPriority,          // Priority of the task)
      &xTaskServoInterface,   // Task handle to keep track of created task
      1);                    // Core where the task should run

}

void loop() {
  //delay(1);
  RCSOFTCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(1)));
}