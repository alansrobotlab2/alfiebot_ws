#include <Arduino.h>
#include <micro_ros_platformio.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>

// #include <std_msgs/msg/int32.h>

#include "scservo/SCServo.h"

#include "memorystruct.h"

#include <alfie_msgs/msg/servo_memory_map.h>

#if !defined(MICRO_ROS_TRANSPORT_ARDUINO_SERIAL)
#error This example is only avaliable for Arduino framework with serial transport.
#endif

#define NUMSERVOS 10

MemoryReplyBuf mBuf[NUMSERVOS];

rcl_publisher_t publisher;

typedef union
{
  alfie_msgs__msg__ServoMemoryMap msg;
  u8 bytes[sizeof(alfie_msgs__msg__ServoMemoryMap)];
} ServoMemoryMapMsgBuf;
ServoMemoryMapMsgBuf msg;
// std_msgs__msg__Int32 msg;

rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
// rcl_timer_t timer;

SMS_STS st;

// #define BAUDRATE 460800
#define BAUDRATE 921600

TaskHandle_t xTaskServoInterface = NULL;
TaskHandle_t xTaskROS = NULL;
const UBaseType_t taskPriority = 0;

bool micro_ros_init_successful;

enum agentstates
{
  WAITING_AGENT,
  AGENT_AVAILABLE,
  AGENT_CONNECTED,
  AGENT_DISCONNECTED
} agentState;

enum servoloopstates
{
  RUNNING,
  REQUEST_STOP,
  STOPPED
} servoLoopState;

unsigned long start_time = 0;
uint8_t duration = 0;

uint8_t IDS[NUMSERVOS] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

MemoryReplyBuf buf;
MemoryReplyBuf rbuf;

// the uart used to control servos.
// GPIO 18 - S_RXD, GPIO 19 - S_TXD, as default.
#define S_RXD 18
#define S_TXD 19

#define RCCHECK(fn)              \
  {                              \
    rcl_ret_t temp_rc = fn;      \
    if ((temp_rc != RCL_RET_OK)) \
    {                            \
      error_loop();              \
    }                            \
  }
#define RCSOFTCHECK(fn)          \
  {                              \
    rcl_ret_t temp_rc = fn;      \
    if ((temp_rc != RCL_RET_OK)) \
    {                            \
    }                            \
  }

#define EXECUTE_EVERY_N_MS(MS, X)      \
  do                                   \
  {                                    \
    static volatile int64_t init = -1; \
    if (init == -1)                    \
    {                                  \
      init = uxr_millis();             \
    }                                  \
    if (uxr_millis() - init > MS)      \
    {                                  \
      init = uxr_millis();             \
      X;                               \
    }                                  \
  } while (0)

// Error handle loop
void error_loop()
{
  while (1)
  {
    delay(100);
  }
}

void ros_100hz()
{

  // copy mBuf[i].bytes into msg.bytes
  // memcpy(msg.bytes, mBuf[0].bytes, sizeof(MemoryStruct));
  memcpy(rbuf.bytes, mBuf[0].bytes, sizeof(MemoryStruct));
  msg.msg.firmwaremajor = rbuf.memory.firmwareMajor;
  msg.msg.firmwaresub = rbuf.memory.firmwareSub;
  msg.msg.unassigned0 = rbuf.memory.unassigned0;
  msg.msg.servomajor = rbuf.memory.servoMajor;
  msg.msg.servosub = rbuf.memory.servoSub;
  msg.msg.servoid = rbuf.memory.servoID;
  msg.msg.baudrate = rbuf.memory.baudRate;
  msg.msg.returndelay = rbuf.memory.returnDelay;
  msg.msg.responsestatuslevel = rbuf.memory.responseStatusLevel;
  msg.msg.minanglelimit = rbuf.memory.minAngleLimit;
  msg.msg.maxanglelimit = rbuf.memory.maxAngleLimit;
  msg.msg.maxtemplimit = rbuf.memory.maxTempLimit;
  msg.msg.mininputvoltage = rbuf.memory.minInputVoltage;
  msg.msg.maxinputvoltage = rbuf.memory.maxInputVoltage;
  msg.msg.maxtorque = rbuf.memory.maxTorque;
  msg.msg.phase = rbuf.memory.phase;
  msg.msg.unloadingcondition = rbuf.memory.unloadingCondition;
  msg.msg.ledalarmcondition = rbuf.memory.LEDAlarmCondition;
  msg.msg.pcoefficient = rbuf.memory.Pcoefficient;
  msg.msg.dcoefficient = rbuf.memory.Dcoefficient;
  msg.msg.icoefficient = rbuf.memory.Icoefficient;
  msg.msg.minstartupforce = rbuf.memory.minStartupForce;
  msg.msg.clockwiseinsensitivearea = rbuf.memory.clockwiseInsensitiveArea;
  msg.msg.counterclockwiseinsensitiveregion = rbuf.memory.counterclockwiseInsensitiveRegion;
  msg.msg.protectioncurrent = rbuf.memory.protectionCurrent;
  msg.msg.angularresolution = rbuf.memory.angularResolution;
  msg.msg.positioncorrection = rbuf.memory.positionCorrection;
  msg.msg.operationmode = rbuf.memory.operationMode;
  msg.msg.protectivetorque = rbuf.memory.protectiveTorque;
  msg.msg.protectiontime = rbuf.memory.protectionTime;
  msg.msg.overloadtorque = rbuf.memory.overloadTorque;
  msg.msg.speedclosedlooppcoefficient = rbuf.memory.speedClosedLoopPcoefficient;
  msg.msg.overcurrentprotectiontime = rbuf.memory.OvercurrentProtectionTime;
  msg.msg.velocityclosedloopicoefficient = rbuf.memory.velocityClosedLoopIcoefficient;
  msg.msg.torqueswitch = rbuf.memory.torqueSwitch;
  msg.msg.acceleration = rbuf.memory.acceleration;
  msg.msg.targetlocation = rbuf.memory.targetLocation;
  msg.msg.runningtime = rbuf.memory.runningTime;
  msg.msg.runningspeed = rbuf.memory.runningSpeed;
  msg.msg.torquelimit = rbuf.memory.torqueLimit;
  // msg.msg.unassigned1 = rbuf.memory.unassigned1;
  // msg.msg.unassigned2 = rbuf.memory.unassigned2;
  // msg.msg.unassigned3 = rbuf.memory.unassigned3;
  // msg.msg.unassigned4 = rbuf.memory.unassigned4;
  // msg.msg.unassigned5 = rbuf.memory.unassigned5;
  msg.msg.lockmark = rbuf.memory.lockMark;
  msg.msg.currentlocation = rbuf.memory.currentLocation;
  msg.msg.currentspeed = rbuf.memory.currentSpeed;
  msg.msg.currentload = rbuf.memory.currentLoad;
  msg.msg.currentvoltage = rbuf.memory.currentVoltage;
  msg.msg.currenttemperature = rbuf.memory.currentTemperature;
  msg.msg.asyncwriteflag = rbuf.memory.asyncWriteFlag;
  msg.msg.servostatus = rbuf.memory.servoStatus;
  msg.msg.mobilesign = rbuf.memory.mobileSign;
  // msg.msg.unassigned6 = rbuf.memory.unassigned6;
  // msg.msg.unassigned7 = rbuf.memory.unassigned7;
  msg.msg.currentcurrent = rbuf.memory.currentCurrent;

  RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
  // rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
}

unsigned long start_time1 = 0;
unsigned long start_time2 = 0;
uint8_t duration1 = 0;
uint8_t duration2 = 0;


void flushSerialServoLine()
{
  vTaskDelay(10 / portTICK_PERIOD_MS);
  while (Serial1.available())
  {
    Serial1.read();
  }
  for(int e = 0; e < NUMSERVOS; e++) {
    st.Ping(e + 1);
  }
}

void ServoLoop()
{
  start_time1 = millis();
  start_time2 = micros();

  st.syncReadPacketTx(IDS, NUMSERVOS, 56, 15);

  int RxResult = 0;

  for (int i = 0; i < NUMSERVOS; i++)
  {
    RxResult = st.syncReadPacketRx((i + 1), buf.bytes + 56);
    if (RxResult >0) {
      memcpy(mBuf[i].bytes + 56, buf.bytes + 56, 15);
    }
    else
    {
      flushSerialServoLine();
      return;
    }
  }

  // vTaskDelay(1 / portTICK_PERIOD_MS);

  st.syncReadPacketTx(IDS, NUMSERVOS, 56, 4);

  for (int i = 0; i < NUMSERVOS; i++)
  {
    RxResult = st.syncReadPacketRx((i + 1), buf.bytes + 56);
    if (RxResult >0) {
      memcpy(mBuf[i].bytes + 56, buf.bytes + 56, 15);
    }
    else
    {
      flushSerialServoLine();
      return;
    }
  }

  duration1 = static_cast<uint8_t>((millis() - start_time1));
  duration2 = static_cast<uint8_t>((micros() - start_time2) / 100);
  mBuf[0].memory.firmwareMajor = duration1;
  mBuf[0].memory.firmwareSub = duration2;

  // printf("Duration1: %d, Duration2: %d\n", duration1, duration2);

  // vTaskDelay(0.5 / portTICK_PERIOD_MS);
  ros_100hz();
}

void ServoLoop14ms()
{
  start_time1 = millis();
  start_time2 = micros();

  for (int i = 0; i < NUMSERVOS; i++)
  {
    st.Read(i + 1, 56, buf.bytes + 56, 15); // Pass the array to the Read function
    // memcopy from buf to mBuf[i]
    memcpy(mBuf[i].bytes + 56, buf.bytes + 56, 15);
  }

  //vTaskDelay(0.1 / portTICK_PERIOD_MS);
  // TODO add in command feed back to servos here as well
  // substitute second read for now
  for (int i = 0; i < NUMSERVOS; i++)
  {
    st.Read(i + 1, 56, buf.bytes + 56, 4); // Pass the array to the Read function
    // memcopy from buf to mBuf[i]
    memcpy(mBuf[i].bytes + 56, buf.bytes + 56, 4);
  }

  //vTaskDelay(0.1 / portTICK_PERIOD_MS);

  duration1 = static_cast<uint8_t>((millis() - start_time1));
  duration2 = static_cast<uint8_t>((micros() - start_time2) / 100);
  mBuf[0].memory.firmwareMajor = duration1;
  mBuf[0].memory.firmwareSub = duration2;
  // printf("Duration1: %d, Duration2: %d\n", duration1, duration2);

  // vTaskDelay(0.5 / portTICK_PERIOD_MS);
  ros_100hz();

}

// void vServoInterfaceTask(void *pvParameters)
// {
//   /*
//     currently benchmarked at 9ms for 10 servos
//     loses sync after a few seconds and duration goes to 120ms and never recovers
//   */

//   for (int i = 0; i < NUMSERVOS; i++)
//   {
//     st.Read((i + 1), 0, mBuf[i].bytes, sizeof(MemoryStruct)); // Pass the array to the Read function
//     st.EnableTorque(i, 1);
//     st.writeByte(i, 8, 1); // send status packet
//     // st.writeByte(i, 7, 1);  // return delay 1*2ns
//   }

//   while (1)
//   {
//     EXECUTE_EVERY_N_MS(20, ServoLoop(););
//     vTaskDelay(1 / portTICK_PERIOD_MS);
//   }
// }

bool create_entities()
{
  // create init_

  allocator = rcl_get_default_allocator();

  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));

  // create node
  RCCHECK(rclc_node_init_default(&node, "micro_ros_platformio_node", "", &support));

  // create publisher
  RCCHECK(rclc_publisher_init_best_effort(
      &publisher,
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(alfie_msgs, msg, ServoMemoryMap),
      "micro_ros_platformio_node_publisher"));

  // create executor
  RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));

  return true;
}

bool destroy_entities()
{
  rmw_context_t *rmw_context = rcl_context_get_rmw_context(&support.context);
  (void)rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);

  rcl_ret_t ret;

  ret = rcl_publisher_fini(&publisher, &node);
  ret = rclc_executor_fini(&executor);
  ret = rcl_node_fini(&node);
  ret = rclc_support_fini(&support);

  return true;
}

void vROSTask(void *pvParameters)
{
  while (1)
  {
    switch (agentState)
    {
    case WAITING_AGENT:
      EXECUTE_EVERY_N_MS(500, agentState = (RMW_RET_OK == rmw_uros_ping_agent(100, 1)) ? AGENT_AVAILABLE : WAITING_AGENT;);
      break;
    case AGENT_AVAILABLE:
      agentState = (true == create_entities()) ? AGENT_CONNECTED : WAITING_AGENT;
      if (agentState == WAITING_AGENT)
      {
        destroy_entities();
      };
      break;
    case AGENT_CONNECTED:
      EXECUTE_EVERY_N_MS(200, agentState = (RMW_RET_OK == rmw_uros_ping_agent(100, 10)) ? AGENT_CONNECTED : AGENT_DISCONNECTED;);
      if (agentState == AGENT_CONNECTED)
      {
        // EXECUTE_EVERY_N_MS(10, ros_100hz(););
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
        vTaskDelay(10 / portTICK_PERIOD_MS);
      }

      break;
    case AGENT_DISCONNECTED:
      destroy_entities();
      agentState = WAITING_AGENT;
      break;
    default:
      break;
    }
  }
}

void setup()
{
  // Configure serial transport
  Serial.begin(BAUDRATE);

  Serial1.begin(
    1000000, 
    SERIAL_8N1, 
    S_RXD, S_TXD,
    false,
    20000,
    127
  );

  st.pSerial = &Serial1;

  set_microros_serial_transports(Serial);

  agentState = WAITING_AGENT;

  // xTaskCreatePinnedToCore(
  //     vServoInterfaceTask,
  //     "ServoInterfaceTask", // A name just for humans
  //     10000,                // Stack size in bytes
  //     NULL,                 // Parameter passed as input of the task
  //     1,         // Priority of the task)
  //     &xTaskServoInterface, // Task handle to keep track of created task
  //     1);                   // Core where the task should run

  xTaskCreatePinnedToCore(
      vROSTask,
      "ROSTask", // A name just for humans
      10000,     // Stack size in bytes
      NULL,      // Parameter passed as input of the task
      0,         // Priority of the task)
      &xTaskROS, // Task handle to keep track of created task
      0);        // Core where the task should run
}

// defaults to core 1
// in arduino land just stick whatever you want to run on core 1
// in loop() and b done with it?
void loop()
{
  for (int i = 0; i < NUMSERVOS; i++)
  {
    st.Read((i + 1), 0, mBuf[i].bytes, sizeof(MemoryStruct)); // Pass the array to the Read function
    st.EnableTorque(i, 1);
    st.writeByte(i, 8, 1); // send status packet
    // st.writeByte(i, 7, 1);  // return delay 1*2ns
  }

  while (1)
  {
    EXECUTE_EVERY_N_MS(9, ServoLoop(););
    //vTaskDelay(1 / portTICK_PERIOD_MS);
  }
}